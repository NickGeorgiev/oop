#include <iostream>
#include<string>
#include<queue>
#include<stack>
#include<list>
#include <fstream>

class Point
{
	int x;
	int y;
	std::string name;
	int sizeName = 0;
public:
	Point() :x(0), y(0), name("") {};
	void print()const
	{
		std::cout << x << std::endl;
		std::cout << y << std::endl;
		std::cout << name.data() << std::endl;
	}
	void savePoint(std::ofstream & now)
	{
		now.open("math.txt", std::ios::binary);

		if (!now.is_open())
		{
			std::cout << "error opening file";
		}
		else {
			now.write((char*)&x, sizeof(x));
			now.write((char*)&y, sizeof(y));
			int sizeName = name.size();
			now.write((char*)&sizeName, sizeof(sizeName));
			now.write(name.data(), sizeof(char) *sizeName);
		}
		now.close();

	}
	void readPoint()
	{
		std::ifstream wow;
		wow.open("math.txt", std::ios::binary | std::ios::ate);

		if (!wow.is_open())
		{
			std::cout << "error opening file";
		}
		else
		{
			wow.read((char*)&x, sizeof(x));
			wow.read((char*)&y, sizeof(y));
			int size = 0;
			wow.read((char*)&sizeName, sizeof(sizeName));
			char* buffer = new char[sizeName + 1];
			wow.read(buffer, sizeof(char)*sizeName);
			buffer[sizeName] = '\0';
			name.clear();
			name.append(buffer);

		}
		wow.close();

	}

};
class Serializer
{
private:
	//std::string FileName;
	std::queue<Point> q;
	std::stack<Point> s;
	std::list<Point> l;
public:
	//Serializer() :FileName("") {};
	void saveQueue()
	{
		std::ofstream potoche("poli.txt", std::ios::binary|std::ios::out);
		if (!potoche.is_open())
		{
			std::cout << "error";
		}
		else
		{
			int size = q.size();
			potoche.write((char*)&size, sizeof(size));
			while (!q.empty())
			{
				q.front().print();
				q.front().savePoint(potoche);
				q.pop();
			}
		}
		potoche.close();
	}
	void read()
	{
		std::ifstream potoche("poli.txt",std::ios::binary|std::ios::out);
		if (potoche)
		{
			size_t size = 0;
			potoche.read((char*)&size, sizeof(q.size()));
			for (int i = 0; i < size; i++)
			{
				Point p;
				p.readPoint();
				q.push(p);
				q.back().print();
			}

		}
		potoche.close();
	}
};


int main()
{
	return 0;
}
