#include <iostream>
#include<string>
#include<queue>
#include<stack>
#include<list>
#include <fstream>

class Point
{
	int x;
	int y;
	std::string name;
	int sizeName=0;
public:
	void savePoint()
	{
		std::ofstream now;
		now.open("math.txt", std::ios::binary);

		if (!now.is_open())
		{
			std::cout << "error opening file";
		}
		else {
			now.write((char*)&x, sizeof(x));
			now.write((char*)&y, sizeof(y));
			now.write((char*)&sizeName, sizeof(sizeName));
			now.write(name.data(), sizeof(char) * name.size());
		}
		now.close();

	}
	void readPoint()
	{
		std::ifstream wow;
		wow.open("math.txt", std::ios::binary | std::ios::ate);
		char* buffer;
		if (!wow.is_open())
		{
			std::cout << "error opening file";
		}
		else
		{
			wow.read(buffer, size_of(int));
			x=(int)buffer;
			wow.read(buffer, size_of(int));
			y=(int)buffer;
			wow.read(buffer, size_of(int));
			sizeName=(int)buffer;
			wow.read(name.data(),sizeName);

		}
		wow.close();

	}

};
class Serializer
{
private:
	std::queue<Point> q;
	std::stack<Point> s;
	std::list<Point> l;
public:

	void save()
	{
		std::ifstream potoche("poli.txt", std::ios::binary);
		if (!potoche.is_open())
		{
			std::cout << "error";
			return;
		}
		else
		{

		}
		potoche.close();

	}
	void read()
	{

	}

};


int main()
{
    return 0;
}
