// list.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>

template<class T>
class Element
{
	T data;
	Element<T>* next;
	Element(const T&, Element<T>* = nullptr);
};
template<class T>
Element<T>::Element(const T&_data, Element<T>*_next) :data(_data), next(_next) {}

template<class T>
class List
{
private:
	Element<T>* first;
	Element<T>* last;
	Element<T>* current;
	int count;
	void cpy(const List<T>&);
	void erase();
public:
	List();
	List(const List<T>&);
	List& operator=(const List<T>&);
	~List();
	void reverse(Element<T> *&);
	List<T> merge(Element<T>, Element<T>);
	void iterator(Element<T>*);
	Element<T>* iter();
	void toEnd(const T &);
	List<T> map(T(*f)(T), List<T> &l);
	List<T> filter(bool(*p)(T), List<T> &l);
	T accumulate(T(*oper)(T, T), T nvalue, List<T> &l);
	bool empty();
	int getSize();
	void print();
	Element<T>* findMin(Element<T>* first);
	void sort(Element<T>* first);
	///// to do
	void pushBack(const T& inf);
	void pushFront(T inf);
	void pushAfter(int pos, const T& inf);
	void popBack();
	void popFront();
	void removeAt(T inf);
	T& getFromPos(int index);
	T& operator[] (int pos);
	bool member(const T& other);
	void sort();
	int getCount()const;



};
template<class T>
void List<T>::cpy(const List<T>& other)
{
	count = other.count;
	Element<T>* curr = other.first;
	first = last = nullptr;
	while (curr)
	{
		if (!first)
		{
			first = new List<T>(curr->data);
			last = first;
		}
		else
		{
			last->next = new List<T>(curr->data);
			last = last->next;
		}
		curr = curr->next;
	}
}
template<class T>
void List<T>::erase()
{
	while (first)
	{
		Element<T>* curr; = first;
		first = first->next;
		delete curr;
	}
	first = last;
}
template<class T>
List<T>::List()
{
	first = last = nullptr;
	count = 0;
}
template<class T>
List<T>::List(const List<T> &other)
{
	cpy(other);
}
template<class T>
List<T>& List<T>:: operator=(const List<T>&other)
{
	if (this != &other)
	{
		erase();
		cpy(other);
	}
	return *this;
}
template<class T>
List<T>::~List()
{
	erase();
}
template<class T>
bool List<T>::empty()
{
	return size == 0;
}
template<class T>
int List<T>::getSize()
{
	return count;
}

template<class T>
void List<T>::reverse(Element<T> *&first)
{
	Element<T>*previous = nullptr;
	Element<T>*current = first;
	Element<T>*incoming;
	while (current)
	{
		incoming = current->next;
		current->next = previous;
		previous = current;
		current = incoming;
	}
	first = previous;
}
template<class T>
void List<T>::toEnd(const T & el) //insert el(element) to the end of the list 
{
	if (!first)
	{
		first = new List<T>(data);
		last = first;
		count++;
	}
	else
	{
		last->next = new List<T>(data);
		last = last->next;
		count++;
	}
}
template<class T>
void List<T>::iterator(Element<T>* p)//initialization of Iterator
{
	if (p)
		current = p;
	else
	{
		current = first;
	}
}

template<class T>
Element<T>* List<T>::iter() //returns current positiion of iterator and moves it with one position
{
	Element<T>*p = current;
	if (current)
	{
		current = current->next;
	}
	return p;
}
template<class T>
List<T> List<T>::map(T(*f)(T), List<T> &l)
{
	l.iterator();
	Element<T>* p = l.iter();
	List<T> l1;
	while (p)
	{
		l1.toEnd(f(p->data)); //toEnd to write
		p = p->next;
	}
	return l1;
}
template<class T>
List<T> List<T>::filter(bool(*p)(T), List<T> &l)
{
	List<T> l1;
	l.iterator();
	Element<T>* recent = l.iter();
	while (recent)
	{
		if (p(recent->data))
			l1.toEnd(p->data);
		p = p->next;
	}
	return l1;
}
template<class T>
T List<T>::accumulate(T(*oper)(T, T), T nvalue, List<T> &l)
{
	T s = nvalue;
	l.iterator();
	Element<T>* recent = l.iter();
	while (recent)
	{
		s = oper(s, recent->data);
		recent = recent->next;
	}
	return s;
}
template<class T>
void List<T>::print()
{
	List<T>* curr = first;
	while (curr)
	{
		std::cout << curr->data << " ";
		curr = curr->next;
	}
}
template<class T>
Element<T>* List<T>::findMin(Element<T>* first)
{
	Element<T> *currMin = first;
	while (first)
	{
		if (first->data < currMin->data)
		{
			currMin = first;
		}
		first = first->next;
	}
	return currMin;
}
template<class T>
void List<T>::sort(Element<T>* first)
{
	while (first)
	{
		Element<T>*currMin = findMin(first);
		if (first->data > currMin->data)
		{
			T swapHelp = first->data;
			first->data = currMin->data;
			currMin->data = swapHelp;
		}
		first = first->next;
	}
}
template<class T>
List<T> List<T>::merge(Element<T>* one, Element<T>* other) //we accept that for other(list) we do not know if it is sorted :D
{
	Element<T> *curr = other.first;
	if (curr == nullptr) return;
	else {
		sortList(other);
		while (curr->next)
		{
			last = curr->next;
			current = curr->next;
		}
		last->next = other.first; //we connect the two lists :)
		while (curr->next)
		{
			sortList(curr);
		}
	}
}
//template<class T>
//void List<T>::sort()
//{
//	if (first == nullptr)return;
//	List<T>* crrNode = first;
//	List<T>* nextNode;
//	while (crrNode != nullptr)
//	{
//		nextNode = crrNode->next;
//		while (nextNode)
//		{
//			if (nextNode->data < crrNode->data)
//			{
//				T save = crrNode->data;
//				crrNode->data = nextNode->data;
//				nextNode->data = save;
//			}
//			nextNode = nextNode->next;
//		}
//		crrNode = crrNode->next;
//	}
//}

int main()
{

	return 0;
}
