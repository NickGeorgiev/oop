
#include <iostream>
template<class T>
class Element
{
    T data;
    Element<T> next;
    Element(const T&_data,Element<T>*_next):data(_data),next(_next){}
}
template<class T>
class List
{
private:
    Element<T>* first;
    Element<T>* last;
    int count;
    void cpy(const List&);
    void erase();
public:
    List();
    List(const&List);
    List& operator=(const List&);
    ~List();
    
    void pushBack(const T& inf);
	void pushFront(T inf);
	void pushAfter(int pos, const T& inf);
	void popBack();
	void popFront();
	void removeAt(T inf);
	T& getFromPos(int index);
	T& operator[] (int pos);
	bool member(const T& other);
	void sort();
    int getCount()const;
    
}
template<class T>
void List<T>::cpy(const List&other)
{
    Element<T>* curr=other.first;
    while(curr!=nullptr)
    {
        pushBack(curr->data);
        curr=curr->next;
    }
}
template<class T>
void List<T>::erase()
{
    Element<T>* curr;
    while(first!=nullptr)
    {
        curr=first;
        first=first->next;
        delete curr;
    }
    first=last=nullpte;
    count=0;
}
template<class T>
List()
{
    first=nullptr;
    last=nullptr;
    count=0;
}
template<class T>
    List(const List &other )
    {
        cpy(other);
    }
    template<class T>
    List& operator=(const List&)
    {
        if(first==other.first) return *this;
        erase();
        cpy(other);
        return*this;
    }
    template<class T>
    ~List()
    {
        erase();
    }
    
    
    //обръщане на елементите от списък

template<class T>
class Box
{
    T data;
    Box<T> next;
    Box(const T&elem,Box<T>*_next):data(elem),next(_next){}
}

template<class T>
void reverse(Box<T>*&start)
{
    Box<T>*previous=nullptr;
    Box<T>*current=start;
    Box<T>*incoming;
    while(current)
    {
        incoming=current->next;
        current->next=previous;
        previous=current;
        current=incoming;
    }
    start=previous;
}
