// ConsoleApplication9.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include<iostream>

template<class T>
class Node
{
private:
	T value;
	Node<T> * next;
	Node(const T & _val, Node<T> *_next = nullptr) :value(_val), next(_next) {}

	// do not use Destructor
};

template<class T>
class Queue
{
private:
	Node<T> *first;
	Node<T> *last;
	int size;
	void cpy(const Queue<T> & other);
	void erase();
public:
	Queue();
	~Queue();
	Queue(const Queue<T>& other);
	Queue<T>& operator=(const Queue<T>& other);
	void push(const T &);
	void pop();
	//const T& front();
	//const T& back();

};
template<class T>
void Queue<T>::push(const T & val)
{
	Node<T> *newNode = new Node<T>;
	size++;
	newNode->value = val;
	newNode->next = nullptr;
	if (last)
	{
		last->next = newNode;
		last = newNode;
	}
	else
	{
		first = newNode;
		last = first;
	}
}


template<class T>
void Queue<T>::pop()
{
	size--;
	if (size != 0)
	{
		if (first == last)
		{
			delete this->first;
			first = nullptr;
			last = first;
		}
		else
		{
			Node<T> * help = first->next;
			delete first;
			first = help;
		}
	}
	else
	{
		std::cout << "Empty queue!";
	}


}
template <class T>
void Queue<T>::cpy(const Queue<T>& other)
{
	size = other.size;
	if (size)
	{
		first = new Node<T>;
		Node<T>* temp = other.first;
		Node<T>* newNode = first;

		while (temp->next)
		{
			newNode->value = temp->value;
			newNode->next = new Node<T>;
			newNode = newNode->next;
			temp = temp->next;
		}
		newNode->value = temp->value;
		newNode->next = temp->next;
		last = newNode;
		last->next = nullptr;
	}
	else
	{
		firsr = last = nullptr;
	}
}
template <class T>
void Queue<T>::erase()
{
	while (first)
	{
		pop();
	}
}
template<class T>
Queue<T>::Queue()
{
	first = nullptr;
	last = nullptr;
	size = 0;
}
template<class T>
Queue<T>::~Queue()
{
	erase();
}
template<class T>
Queue<T>::Queue(const Queue<T>& other)
{
	cpy(other);
}
template<class T>
Queue<T>& Queue<T>::operator= (const Queue<T>& other)
{
	if (this != &other)
	{
		erase();
		cpy(other);
	}
	return *this;
}
//template <class T>
//const T& Queue<T>::front()
//{
//	if (first)
//	{
//		return first->value;
//	}
//	return T();
//}
//
//template <class T>
//const T& Queue<T>::back()
//{
//	if (last)
//	{
//		return last->value;
//	}
//	return T();
//}

int main()
{
	return 0;
}
